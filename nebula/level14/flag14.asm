
flag14:     file format elf32-i386


Disassembly of section .init:

08048310 <_init>:
 8048310:	53                   	push   %ebx
 8048311:	83 ec 08             	sub    $0x8,%esp
 8048314:	e8 00 00 00 00       	call   8048319 <_init+0x9>
 8048319:	5b                   	pop    %ebx
 804831a:	81 c3 db 1c 00 00    	add    $0x1cdb,%ebx
 8048320:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048326:	85 c0                	test   %eax,%eax
 8048328:	74 05                	je     804832f <_init+0x1f>
 804832a:	e8 41 00 00 00       	call   8048370 <__gmon_start__@plt>
 804832f:	e8 0c 01 00 00       	call   8048440 <frame_dummy>
 8048334:	e8 d7 02 00 00       	call   8048610 <__do_global_ctors_aux>
 8048339:	83 c4 08             	add    $0x8,%esp
 804833c:	5b                   	pop    %ebx
 804833d:	c3                   	ret    

Disassembly of section .plt:

08048340 <read@plt-0x10>:
 8048340:	ff 35 f8 9f 04 08    	pushl  0x8049ff8
 8048346:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 804834c:	00 00                	add    %al,(%eax)
	...

08048350 <read@plt>:
 8048350:	ff 25 00 a0 04 08    	jmp    *0x804a000
 8048356:	68 00 00 00 00       	push   $0x0
 804835b:	e9 e0 ff ff ff       	jmp    8048340 <_init+0x30>

08048360 <printf@plt>:
 8048360:	ff 25 04 a0 04 08    	jmp    *0x804a004
 8048366:	68 08 00 00 00       	push   $0x8
 804836b:	e9 d0 ff ff ff       	jmp    8048340 <_init+0x30>

08048370 <__gmon_start__@plt>:
 8048370:	ff 25 08 a0 04 08    	jmp    *0x804a008
 8048376:	68 10 00 00 00       	push   $0x10
 804837b:	e9 c0 ff ff ff       	jmp    8048340 <_init+0x30>

08048380 <exit@plt>:
 8048380:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048386:	68 18 00 00 00       	push   $0x18
 804838b:	e9 b0 ff ff ff       	jmp    8048340 <_init+0x30>

08048390 <__libc_start_main@plt>:
 8048390:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048396:	68 20 00 00 00       	push   $0x20
 804839b:	e9 a0 ff ff ff       	jmp    8048340 <_init+0x30>

080483a0 <write@plt>:
 80483a0:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80483a6:	68 28 00 00 00       	push   $0x28
 80483ab:	e9 90 ff ff ff       	jmp    8048340 <_init+0x30>

Disassembly of section .text:

080483b0 <_start>:
 80483b0:	31 ed                	xor    %ebp,%ebp
 80483b2:	5e                   	pop    %esi
 80483b3:	89 e1                	mov    %esp,%ecx
 80483b5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483b8:	50                   	push   %eax
 80483b9:	54                   	push   %esp
 80483ba:	52                   	push   %edx
 80483bb:	68 00 86 04 08       	push   $0x8048600
 80483c0:	68 90 85 04 08       	push   $0x8048590
 80483c5:	51                   	push   %ecx
 80483c6:	56                   	push   %esi
 80483c7:	68 64 84 04 08       	push   $0x8048464
 80483cc:	e8 bf ff ff ff       	call   8048390 <__libc_start_main@plt>
 80483d1:	f4                   	hlt    
 80483d2:	90                   	nop
 80483d3:	90                   	nop
 80483d4:	90                   	nop
 80483d5:	90                   	nop
 80483d6:	90                   	nop
 80483d7:	90                   	nop
 80483d8:	90                   	nop
 80483d9:	90                   	nop
 80483da:	90                   	nop
 80483db:	90                   	nop
 80483dc:	90                   	nop
 80483dd:	90                   	nop
 80483de:	90                   	nop
 80483df:	90                   	nop

080483e0 <__do_global_dtors_aux>:
 80483e0:	55                   	push   %ebp
 80483e1:	89 e5                	mov    %esp,%ebp
 80483e3:	53                   	push   %ebx
 80483e4:	83 ec 04             	sub    $0x4,%esp
 80483e7:	80 3d 20 a0 04 08 00 	cmpb   $0x0,0x804a020
 80483ee:	75 3f                	jne    804842f <__do_global_dtors_aux+0x4f>
 80483f0:	a1 24 a0 04 08       	mov    0x804a024,%eax
 80483f5:	bb 20 9f 04 08       	mov    $0x8049f20,%ebx
 80483fa:	81 eb 1c 9f 04 08    	sub    $0x8049f1c,%ebx
 8048400:	c1 fb 02             	sar    $0x2,%ebx
 8048403:	83 eb 01             	sub    $0x1,%ebx
 8048406:	39 d8                	cmp    %ebx,%eax
 8048408:	73 1e                	jae    8048428 <__do_global_dtors_aux+0x48>
 804840a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048410:	83 c0 01             	add    $0x1,%eax
 8048413:	a3 24 a0 04 08       	mov    %eax,0x804a024
 8048418:	ff 14 85 1c 9f 04 08 	call   *0x8049f1c(,%eax,4)
 804841f:	a1 24 a0 04 08       	mov    0x804a024,%eax
 8048424:	39 d8                	cmp    %ebx,%eax
 8048426:	72 e8                	jb     8048410 <__do_global_dtors_aux+0x30>
 8048428:	c6 05 20 a0 04 08 01 	movb   $0x1,0x804a020
 804842f:	83 c4 04             	add    $0x4,%esp
 8048432:	5b                   	pop    %ebx
 8048433:	5d                   	pop    %ebp
 8048434:	c3                   	ret    
 8048435:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048440 <frame_dummy>:
 8048440:	55                   	push   %ebp
 8048441:	89 e5                	mov    %esp,%ebp
 8048443:	83 ec 18             	sub    $0x18,%esp
 8048446:	a1 24 9f 04 08       	mov    0x8049f24,%eax
 804844b:	85 c0                	test   %eax,%eax
 804844d:	74 12                	je     8048461 <frame_dummy+0x21>
 804844f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048454:	85 c0                	test   %eax,%eax
 8048456:	74 09                	je     8048461 <frame_dummy+0x21>
 8048458:	c7 04 24 24 9f 04 08 	movl   $0x8049f24,(%esp)
 804845f:	ff d0                	call   *%eax
 8048461:	c9                   	leave  
 8048462:	c3                   	ret    
 8048463:	90                   	nop

08048464 <main>:
 8048464:	55                   	push   %ebp
 8048465:	89 e5                	mov    %esp,%ebp
 8048467:	57                   	push   %edi
 8048468:	56                   	push   %esi
 8048469:	83 e4 f0             	and    $0xfffffff0,%esp
 804846c:	83 c4 80             	add    $0xffffff80,%esp
 804846f:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048472:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 8048476:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 804847c:	89 44 24 7c          	mov    %eax,0x7c(%esp)
 8048480:	31 c0                	xor    %eax,%eax
 8048482:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
 8048489:	00 
 804848a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804848e:	7e 2e                	jle    80484be <main+0x5a>
 8048490:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048494:	83 c0 04             	add    $0x4,%eax
 8048497:	8b 00                	mov    (%eax),%eax
 8048499:	89 c2                	mov    %eax,%edx
 804849b:	b8 60 86 04 08       	mov    $0x8048660,%eax
 80484a0:	b9 03 00 00 00       	mov    $0x3,%ecx
 80484a5:	89 d6                	mov    %edx,%esi
 80484a7:	89 c7                	mov    %eax,%edi
 80484a9:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 80484ab:	0f 97 c2             	seta   %dl
 80484ae:	0f 92 c0             	setb   %al
 80484b1:	89 d1                	mov    %edx,%ecx
 80484b3:	28 c1                	sub    %al,%cl
 80484b5:	89 c8                	mov    %ecx,%eax
 80484b7:	0f be c0             	movsbl %al,%eax
 80484ba:	85 c0                	test   %eax,%eax
 80484bc:	74 24                	je     80484e2 <main+0x7e>
 80484be:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80484c2:	8b 10                	mov    (%eax),%edx
 80484c4:	b8 63 86 04 08       	mov    $0x8048663,%eax
 80484c9:	89 54 24 04          	mov    %edx,0x4(%esp)
 80484cd:	89 04 24             	mov    %eax,(%esp)
 80484d0:	e8 8b fe ff ff       	call   8048360 <printf@plt>
 80484d5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484dc:	e8 9f fe ff ff       	call   8048380 <exit@plt>
 80484e1:	90                   	nop
 80484e2:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
 80484e9:	00 
 80484ea:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 80484ee:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484f2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80484f9:	e8 52 fe ff ff       	call   8048350 <read@plt>
 80484fe:	89 44 24 34          	mov    %eax,0x34(%esp)
 8048502:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
 8048507:	7f 0c                	jg     8048515 <main+0xb1>
 8048509:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048510:	e8 6b fe ff ff       	call   8048380 <exit@plt>
 8048515:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 804851c:	00 
 804851d:	eb 29                	jmp    8048548 <main+0xe4>
 804851f:	8d 44 24 3c          	lea    0x3c(%esp),%eax ;load effected addres (load added esp and 0x3c to eax) - grab var off stack (0x3c is mem location) - move that into eax
 8048523:	03 44 24 30          	add    0x30(%esp),%eax
; add some var (the value esp + 0x30 points to) to eax
 8048527:	0f b6 00             	movzbl (%eax),%eax
; move something of width of 1 byte into a 32bit memory location, pad with 0
 804852a:	89 c2                	mov    %eax,%edx  
;move content of eax to edx (saving)      
 804852c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
; grab other var (32bit wide - so pointer or int) off stack to eax 
 8048530:	01 d0                	add    %edx,%eax
; add edx to eax (store in eax)
 8048532:	89 c2                	mov    %eax,%edx
; save to edx
 8048534:	8d 44 24 3c          	lea    0x3c(%esp),%eax
; go back to start of string we process, load this addres into eax
 8048538:	03 44 24 30          	add    0x30(%esp),%eax
; add whats at location 0x30 (our current location index) to eax (pointer)
 804853c:	88 10                	mov    %dl,(%eax)
; moving lower byte of edx (dl) to where eax points (into the string)
 804853e:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
; add lower - add just 1 to 0x2c (some offset integer) 
 8048543:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
; increment the position index in my string
 8048548:	8b 44 24 30          	mov    0x30(%esp),%eax
; what is at 0x30 (our index) move it to eax
 804854c:	3b 44 24 34          	cmp    0x34(%esp),%eax
; comparing the stuff at esp+0x34 (length of string) to eax (our index)
 8048550:	7c cd                	jl     804851f <main+0xbb>
; if same, go back up and loop 
 8048552:	8b 44 24 34          	mov    0x34(%esp),%eax
; from here on, just maintenance stuff ;-)
 8048556:	89 44 24 08          	mov    %eax,0x8(%esp)
 804855a:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 804855e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048562:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048569:	e8 32 fe ff ff       	call   80483a0 <write@plt>
 804856e:	89 44 24 38          	mov    %eax,0x38(%esp)
 8048572:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 8048577:	0f 8f 64 ff ff ff    	jg     80484e1 <main+0x7d>
 804857d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048584:	e8 f7 fd ff ff       	call   8048380 <exit@plt>
 8048589:	90                   	nop
 804858a:	90                   	nop
 804858b:	90                   	nop
 804858c:	90                   	nop
 804858d:	90                   	nop
 804858e:	90                   	nop
 804858f:	90                   	nop

08048590 <__libc_csu_init>:
 8048590:	55                   	push   %ebp
 8048591:	57                   	push   %edi
 8048592:	56                   	push   %esi
 8048593:	53                   	push   %ebx
 8048594:	e8 69 00 00 00       	call   8048602 <__i686.get_pc_thunk.bx>
 8048599:	81 c3 5b 1a 00 00    	add    $0x1a5b,%ebx
 804859f:	83 ec 1c             	sub    $0x1c,%esp
 80485a2:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 80485a6:	8d bb 20 ff ff ff    	lea    -0xe0(%ebx),%edi
 80485ac:	e8 5f fd ff ff       	call   8048310 <_init>
 80485b1:	8d 83 20 ff ff ff    	lea    -0xe0(%ebx),%eax
 80485b7:	29 c7                	sub    %eax,%edi
 80485b9:	c1 ff 02             	sar    $0x2,%edi
 80485bc:	85 ff                	test   %edi,%edi
 80485be:	74 29                	je     80485e9 <__libc_csu_init+0x59>
 80485c0:	31 f6                	xor    %esi,%esi
 80485c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80485c8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80485cc:	89 2c 24             	mov    %ebp,(%esp)
 80485cf:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485d3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80485d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485db:	ff 94 b3 20 ff ff ff 	call   *-0xe0(%ebx,%esi,4)
 80485e2:	83 c6 01             	add    $0x1,%esi
 80485e5:	39 fe                	cmp    %edi,%esi
 80485e7:	75 df                	jne    80485c8 <__libc_csu_init+0x38>
 80485e9:	83 c4 1c             	add    $0x1c,%esp
 80485ec:	5b                   	pop    %ebx
 80485ed:	5e                   	pop    %esi
 80485ee:	5f                   	pop    %edi
 80485ef:	5d                   	pop    %ebp
 80485f0:	c3                   	ret    
 80485f1:	eb 0d                	jmp    8048600 <__libc_csu_fini>
 80485f3:	90                   	nop
 80485f4:	90                   	nop
 80485f5:	90                   	nop
 80485f6:	90                   	nop
 80485f7:	90                   	nop
 80485f8:	90                   	nop
 80485f9:	90                   	nop
 80485fa:	90                   	nop
 80485fb:	90                   	nop
 80485fc:	90                   	nop
 80485fd:	90                   	nop
 80485fe:	90                   	nop
 80485ff:	90                   	nop

08048600 <__libc_csu_fini>:
 8048600:	f3 c3                	repz ret 

08048602 <__i686.get_pc_thunk.bx>:
 8048602:	8b 1c 24             	mov    (%esp),%ebx
 8048605:	c3                   	ret    
 8048606:	90                   	nop
 8048607:	90                   	nop
 8048608:	90                   	nop
 8048609:	90                   	nop
 804860a:	90                   	nop
 804860b:	90                   	nop
 804860c:	90                   	nop
 804860d:	90                   	nop
 804860e:	90                   	nop
 804860f:	90                   	nop

08048610 <__do_global_ctors_aux>:
 8048610:	55                   	push   %ebp
 8048611:	89 e5                	mov    %esp,%ebp
 8048613:	53                   	push   %ebx
 8048614:	83 ec 04             	sub    $0x4,%esp
 8048617:	a1 14 9f 04 08       	mov    0x8049f14,%eax
 804861c:	83 f8 ff             	cmp    $0xffffffff,%eax
 804861f:	74 13                	je     8048634 <__do_global_ctors_aux+0x24>
 8048621:	bb 14 9f 04 08       	mov    $0x8049f14,%ebx
 8048626:	66 90                	xchg   %ax,%ax
 8048628:	83 eb 04             	sub    $0x4,%ebx
 804862b:	ff d0                	call   *%eax
 804862d:	8b 03                	mov    (%ebx),%eax
 804862f:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048632:	75 f4                	jne    8048628 <__do_global_ctors_aux+0x18>
 8048634:	83 c4 04             	add    $0x4,%esp
 8048637:	5b                   	pop    %ebx
 8048638:	5d                   	pop    %ebp
 8048639:	c3                   	ret    
 804863a:	90                   	nop
 804863b:	90                   	nop

Disassembly of section .fini:

0804863c <_fini>:
 804863c:	53                   	push   %ebx
 804863d:	83 ec 08             	sub    $0x8,%esp
 8048640:	e8 00 00 00 00       	call   8048645 <_fini+0x9>
 8048645:	5b                   	pop    %ebx
 8048646:	81 c3 af 19 00 00    	add    $0x19af,%ebx
 804864c:	e8 8f fd ff ff       	call   80483e0 <__do_global_dtors_aux>
 8048651:	83 c4 08             	add    $0x8,%esp
 8048654:	5b                   	pop    %ebx
 8048655:	c3                   	ret    

eax = pointer x @ 0x3c
eax = int i @ 0x30
eax = int x[i]
edx = eax # save x[i]
eax = char (?) z @ 0x2c
eax = edx + eax # add chars x[i] + z
edx = eax # edx = x[i]+z
eax = pointer x @ 0x3c
eax = int i @ 0x30
eax = lower byte of edx = x[i]+z
z @ 0x2c ++
i @ 0x30 ++
eax = int i @ 0x30
eax = cmp eax (i) to l @ 0x34 # i ? l 
# jl -> i < l
loop

 8048523:	03 44 24 30          	add    0x30(%esp),%eax
; add some var (the value esp + 0x30 points to) to eax
 8048527:	0f b6 00             	movzbl (%eax),%eax
; move something of width of 1 byte into a 32bit memory location, pad with 0
 804852a:	89 c2                	mov    %eax,%edx  
;move content of eax to edx (saving)      
 804852c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
; grab other var (32bit wide - so pointer or int) off stack to eax 
 8048530:	01 d0                	add    %edx,%eax
; add edx to eax (store in eax)
 8048532:	89 c2                	mov    %eax,%edx
; save to edx
 8048534:	8d 44 24 3c          	lea    0x3c(%esp),%eax
; go back to start of string we process, load this addres into eax
 8048538:	03 44 24 30          	add    0x30(%esp),%eax
; add whats at location 0x30 (our current location index) to eax (pointer)
 804853c:	88 10                	mov    %dl,(%eax)
; moving lower byte of edx (dl) to where eax points (into the string)
 804853e:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
; add lower - add just 1 to 0x2c (some offset integer) 
 8048543:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
; increment the position index in my string
 8048548:	8b 44 24 30          	mov    0x30(%esp),%eax
; what is at 0x30 (our index) move it to eax
 804854c:	3b 44 24 34          	cmp    0x34(%esp),%eax
; comparing the stuff at esp+0x34 (length of string) to eax (our index)
 8048550:	7c cd                	jl     804851f <main+0xbb>
; if same, go back up and loop 
 8048552:	8b 44 24 34          	mov    0x34(%esp),%eax
; from here on, just maintenance stuff ;-)
 8048556:	89 44 24 08          	mov    %eax,0x8(%esp)
 804855a:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 804855e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048562:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048569:	e8 32 fe ff ff       	call   80483a0 <write@plt>
 804856e:	89 44 24 38          	mov    %eax,0x38(%esp)
 8048572:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
 8048577:	0f 8f 64 ff ff ff    	jg     80484e1 <main+0x7d>
 804857d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048584:	e8 f7 fd ff ff       	call   8048380 <exit@plt>
 8048589:	90                   	nop
 804858a:	90                   	nop
 804858b:	90                   	nop
 804858c:	90                   	nop
 804858d:	90                   	nop
 804858e:	90                   	nop
 804858f:	90                   	nop
